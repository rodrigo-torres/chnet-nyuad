#include "Dial.h"
#include <qlabel.h>
#include <qlayout.h>
#include <qwt_dial.h>
#include <qwt_dial_needle.h>
#include <qwt_scale_engine.h>
#include <qwt_transform.h>
#include <qwt_round_scale_draw.h>
//#include "dialbox.h"
#include <qcheckbox.h>
#include <qtimer.h>
#include <qfile.h>
#include <qdebug.h>
#include <sys/stat.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <fcntl.h>
#include <string.h>
#include <termios.h>
#include <signal.h>
#include <sys/time.h>
#include <time.h>
#include <fcntl.h>
#include <errno.h>
#include <sys/file.h>
#include <signal.h>
#include <sys/mman.h>
#include <math.h>
#include <sys/ioctl.h>

int Pippo=1; bool EventIsEnabled=false; bool ini=true;
int OldSize=0; int NewSize=0; int rate=1;

#define SHMSZBIG 30000000
int *shm2;int *shmCommand2;
int shmid2; int shmidString2; 
key_t key2;
int *shared_memory2;


DialBox::DialBox( QWidget *parent, int type ):
    QWidget( parent )
{


 key2 = 7200;
   shmid2 = shmget (7200, SHMSZBIG, IPC_CREAT | 0666);
   if (shmid2 == -1) printf("Errore %s\n ", strerror(errno));
   shared_memory2 =(int *) shmat(shmid2, NULL, 0);
   printf("Data Memory attached at :%d  with shmid %d\n", (int *)shared_memory2,  shmid2);			
 



    d_dial = createDial( type );
    d_CBox = new QCheckBox("Enable",this);

    d_label = new QLabel( this );
    d_label->setAlignment( Qt::AlignCenter );

    QVBoxLayout *layout = new QVBoxLayout( this );;
    layout->setSpacing( 0 );
    layout->addWidget( d_CBox );
    layout->addWidget( d_dial, 10 );
    layout->addWidget( d_label );

    connect( d_dial, SIGNAL( valueChanged( double ) ), 
        this, SLOT( setNum( double ) ) );

    connect( d_CBox, SIGNAL( stateChanged( int ) ), 
        this, SLOT( EventEnable(  ) ) );

    setNeedleValue(d_dial->value());
    setNum( d_dial->value() );

    QTimer *d_timer = new QTimer(this);
    connect(d_timer, SIGNAL(timeout()), this, SLOT(TimerEvent()));
    d_timer->start(1000);


}

QwtDial *DialBox::createDial( int type ) const
{
    QwtDial *dial = new QwtDial();
    dial->setTracking( true );
    dial->setFocusPolicy( Qt::StrongFocus );
//    dial->setObjectName( QString( "Dial %1" ).arg( type + 1 ) );

    QColor needleColor( Qt::red );

            dial->setOrigin( 135.0 );
            dial->setScaleArc( 0.0, 270.0 );
            dial->setScaleMaxMinor( 9 );
            dial->setScaleEngine( new QwtLogScaleEngine );
//            dial->setScale( 1.0e-1, 1.0e4 );
            dial->setScale( 1.0, 1.0e4 );

    QwtDialSimpleNeedle *needle = new QwtDialSimpleNeedle(
        QwtDialSimpleNeedle::Arrow, true, needleColor,
        QColor( Qt::gray ).light( 130 ) ); //130
    dial->setNeedle( needle );

    //const QColor base( QColor( "DimGray" ) );
    const QColor base( QColor( Qt::darkGray ).dark( 150 ) );

    QPalette palette;
    palette.setColor( QPalette::Base, base );
    palette.setColor( QPalette::Window, base.dark( 150 ) );
    palette.setColor( QPalette::Mid, base.dark( 110 ) );
    palette.setColor( QPalette::Light, base.light( 170 ) );
    palette.setColor( QPalette::Dark, base.dark( 170 ) );
    palette.setColor( QPalette::Text, base.dark( 200 ).light( 800 ) );
    palette.setColor( QPalette::WindowText, base.dark( 200 ) );

 //          dial->setValue( 1.0 );

    dial->setPalette( palette );
    dial->setLineWidth( 4 );
    dial->setFrameShadow( QwtDial::Sunken );

    return dial;
}

void DialBox::setNum( double v )
{
    QString text;
    text.setNum( v, 'f', 2 );
//    text.prepend("<font color=#00FF00 size=6>"); //style='bold'

    d_label->setText( text );
}

int DialBox::setNeedleValue( int )
{

//else
Pippo=Pippo+15;


/////////////////////////////////////////////////////////// NEW
    QFile file("/Nfs/nfs03/Position.txt");
//    QFile file("PositionNew.txt");
    if (!file.open(QIODevice::ReadOnly))
    {qDebug() << "Here: ";
//        return;
    }
    else
{    qint64 size = file.size();
     NewSize=int(size);  
     rate =int ((NewSize-OldSize)*1);    
//}
    qDebug() << "Rate: " << size;}
//////////////////////////////////////////////////////////END

     OldSize=NewSize; if(rate<=0)rate=1;
//if(p==1)
if(ini){ini=false;} 
else {d_dial->setValue( rate );}



}


void DialBox::TimerEvent()
{
if(EventIsEnabled)
{int i=1;
setNeedleValue( i );}
}



void DialBox::EventEnable()
{
if(EventIsEnabled) {EventIsEnabled=false; ini=true;}
else {EventIsEnabled=true; TimerEvent();}
}



